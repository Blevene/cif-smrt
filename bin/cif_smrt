#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF::Smrt;
use Config::Simple;
use Data::Dumper;

my %opts;
getopts('hs:T:t:dFc:f:r:v:',\%opts);
our $debug = $opts{'d'};
$debug = $opts{'v'} if($opts{'v'});

my $config      = $opts{'c'} || $ENV{'HOME'}.'/.cif';
my $rules       = $opts{'r'};
my $feed        = $opts{'f'};
my $load_full   = $opts{'F'};

my $rules_dir    = '/opt/cif/etc';
my $throttle    = $opts{'T'} || 'medium';
my $threads     = $opts{'t'} || 1;

die usage() if($opts{'h'} || !$rules);

sub usage {
    return <<EOF;
Usage: perl $0 -c $rules_dir/misc.cfg -f malwaredomainlist -T low
    -h  --help:     this message
    -f  --feed:     feed name (eg: section header in the configuration file)
    -c  --config:   specify the cif config file (default: $config)
    -r  --rules:    specify the rules file to work with (eg: etc/malwaredomains.cfg)
    -F  --full:     "full load", meaning don't do NS resolution on domains
    -d --debug:     debug
    -T  --throttle: throttle (how man threads to use, default: $throttle)
                    low:    threads = 1/2 number of cores
                    medium: threads = number of cores
                    high:   threads = 2x number of cores

Examples:
    \$ $0 -c $rules_dir/spyeyetracker.cfg -f binaries -T medium -F
    \$ cif_feed_parser -c $rules_dir/misc.cfg -f malwaredomainlist -T high -F -d
EOF
}

my ($err,$ret) = CIF::Smrt->new({
    config      => $config,
    threads     => $threads,
    feed        => $feed,
    rules       => $rules,
    load_full   => $load_full,
});

die($err."\n\n".usage()) if($err);

($err,$ret) = $ret->process();

die $err if($err);
warn 'done...';

exit(0);

#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use lib '../libcif-dbi/lib';
use lib '../libcif/lib';
use lib '../../iodef-pb-simple-perl/lib';

use Getopt::Std;
use CIF::Smrt;
use Config::Simple;
use Data::Dumper;
use MIME::Lite;

my %opts;
getopts('hNA:s:T:t:dFc:f:r:v:Pp:',\%opts);
our $debug = $opts{'d'} || 0;
$debug = $opts{'v'} if($opts{'v'});

my $config      = $opts{'c'} || $ENV{'HOME'}.'/.cif';
my $rules       = $opts{'r'};
my $feed        = $opts{'f'};
my $load_full   = $opts{'F'};
my $postprocess = $opts{'P'} || $opts{'p'};

my $rules_dir    = '/opt/cif/etc';
my $throttle    = $opts{'T'} || 'medium';
my $threads     = $opts{'t'};
my $admin       = $opts{'A'} || 'root';
my $fail_open   = $opts{'N'} || 0;

if(!$threads){
    $threads = CIF::Smrt::throttle($throttle);
}

if($postprocess && $postprocess ne '1'){
    my @stuff = split(/,/,$postprocess);
    $postprocess = \@stuff;
    
}

die usage() if($opts{'h'} || !$rules);

sub usage {
    return <<EOF;
Usage: perl $0 -c $rules_dir/misc.cfg -f malwaredomainlist -T low
    -h  --help:     this message
    -f  --feed:     feed name (eg: section header in the configuration file)
    -c  --config:   specify the cif config file (default: $config)
    -r  --rules:    specify the rules file to work with (eg: etc/malwaredomains.cfg)
    -F  --full:     "full load", meaning don't do NS resolution on domains
    -d --debug:     debug
    
Advanced:
    -T  --throttle: throttle (how man threads to use, default: $throttle)
                    low:    threads = number of cores * 0.5
                    medium: threads = number of cores
                    high:   threads = number of cores * 2

    -N  --fail-open:    don't error out if one of the jobs fail, mail the -A admin
                        (default: $fail_open)
    -A  --admin:        designate an admin email address where errors should go if we fail open
                        (default: $admin)
                        
Examples:
    \$ $0 -c $rules_dir/spyeyetracker.cfg -f binaries -T medium
    \$ $0 -c $rules_dir/malwaredomains.cfg -f domains -T high -d
EOF
}

my $ret;
my ($err,$smrt) = CIF::Smrt->new({
    config          => $config,
    threads         => $threads,
    feed            => $feed,
    rules           => $rules,
    load_full       => $load_full,
    postprocess     => $postprocess,
});

die(usage()."\n\n".$err) if($err);

($err,$ret) = $smrt->process();
unless($err){
    warn 'done...';
    exit(0);
}

print '[cif-smrt] failure: '.$smrt->get_rules()->{'source'}."\n";
print $err."\n";

if($fail_open){
    my $msg = MIME::Lite->new(
        To      => $admin,
        Subject => 'cif-smrt failure: '.$smrt->get_rules()->{'source'}.' -- '.$feed,
        Data    => "$err\nfeed: $feed"
    )->send();
    exit(0);
} else {
    exit(-1) ;
}